#-- SSH interception subroutine with a lot great extras.
# This was written originally to eliminate the need to copy or clone a custom .bashrc to remote systems,
#
# Author: Jeremy Melanson
#
# Source-code, documentation and revision Git repository: https://github.com/zish/bashrc_enhancements
#
# Last-Modified: 2016-09-08
#
# $ git clone https://github.com/zish/bashrc_enhancements
#
# To use this, source the file from your .bashrc (or .bash_profile).
#
#
# Features:
#  * Allows you to take your PS1 prompt with you.
#    - Prepends the remote prompt with "(SSH)", to visually indicate that it is an SSH session.
#  * Any aliases defined locally at run time will be defined in your remote session automatically.
#  * Select embedded functions can be cloned to your remote SSH session, by adding them to SSHI_ADD_SUBS, (defined below),
#  * Specific ranges of ines in your .bashrc can be cloned to your remote SSH session, using
#    a special '# [SSH_INCLUDE nn]' remarkbefore the lines without needing to copy them everywhere.
#
#
# This file is part of bashrc_enhancements.
#
#    bashrc_enhancements is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bashrc_enhancements is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with bashrc_enhancements.  If not, see <http://www.gnu.org/licenses/>.

ssh () {
#-- Modification of any variables within this section requires you to restart your terminal session (or 'source' your rc file).

 #-- Set the configuration defaults, if no global override has been set.
 _defaults () {
  local IFS=$'\n'; while read -r L; do
   [[ "${L}" =~ ^[[:blank:]]*\# ]] && continue; # Skip commented-out lines.
   [[ "${L}" =~ ^[[:blank:]]*([^\ \t\=]+)[[:blank:]]*\=[[:blank:]]*(.*) ]] && {
    echo "[ -z \"\${${BASH_REMATCH[1]}}\" ] && local ${BASH_REMATCH[1]}=${BASH_REMATCH[2]}";
   }
  done<<EOF
  #-- Env Config defaults.
  SSHI_ADD_SUBS="sudo ssh tar addpath"
  SSHI_RPS1='\[\033[1;1m\](\[\033[1;31m\]SSH\[\033[0;1m\])\[\033[0;37m\]${PS1}'
  SSHI_UC=~/.ssh/config
#  SSHI_MC=/etc/ssh/ssh_config
  SSHI_LOG_BY_DEF=1 #TODO: Disable this when using this sub on remote SSH hosts.
  SSHI_LOG_LOC=~/ssh_logs
EOF
 } # END defaults ()


 #-- Get SSH hostname and scan conf(s). Missing files are ignored.
 _scancnf() {
  #-- $1 is user config. $2 is main conf. Rest are SSH options.
  local CF=(); local OP=()
  [ -f "${1}" ]&&CF=(${1})
  [ -f "${2}" ]&&CF=(${CF} ${2})
  local C=0; for O in ${*}; do
   [ ${C} -ge ${#CF[@]} ]&& OP=(${OP[@]} ${O})
   C=$(( ${C} + 1 ))
  done
  #-- SSH Command line option knowledge.
  # These are the known options for my current version of OpenSSH (v.7.2p2):
  # If you use another SSH tool with different options, you may be able to just set them here.
  # ** Please let me know if you get a different version to work. I may incorporate it in
  # ** a future version of this tool.
  export CLISW="1246AaCfGgKkMNnsTtVvXxYy" #-- Opts that do not take an argument.
  export CLIOPT="bcDEeFIiLlmOopQqRSWw" #-- Opts that take an argument.

  cat ${CF[@]} | perl -e '
  #-- These were defined as envvars to make things easier for others.
  $clisw="^\\-[".$ENV{CLISW}."]";$cliopt="^\\-[".$ENV{CLIOPT}."]";
  $sh="";while(my $op=shift(@ARGV)){
   if($op=~/$cliopt/){shift(@ARGV);}elsif(!($op=~/$clisw/)){$sh=$op;}}
  #-- Decouple the user@ prefix. Output what is left.
  $sh=~s/^\w+\@//;print "local SSH_HOST=".$sh."\n";
  while(<STDIN>){
   $p=$_;my %rgxt=("\\."=>"\\.","\\*"=>".*","\\?"=>".");
   #-- only want host lines
   if($p=~/^\s*host\s+([^\#]+)\#?([^\#]*)$/i){
    $ch=$1;$a=$2;@h=($ch=~/([^\s\,]+)/g);
    foreach $H(@h){
     #-- Escape wildcard types
     foreach my $e(sort{$b cmp $a}(keys(%rgxt))){$H=~s/$e/$rgxt{$e}/g;}
      $H="^($H)\$";
     if($sh=~/$H/){
      print "local FOUND=".$sh."\n";
      @O=split(/\s*\,\s*/,$a);
      print "local LOG=1\n"if(grep(/^LOG$/,@O));
      print "local NOLOG=1\n"if(grep(/^NOLOG$/,@O));
      print "local NOPROMPT=1\n"if(grep(/^NOPROMPT$/,@O));
      print "local PROMPTONLY=1\n"if(grep(/^PROMPTONLY$/,@O));
      exit;
  } } } }' -- ${OP[@]}
  unset CLISW CLIOPT
 } # END _scancnf

 #-- Pull requested functions defined by SSHI_ADD_SUBS.
 _getrc () {
  set|/usr/bin/perl -e '
   $rc=shift(@ARGV);my %addSubs;
   foreach my $f(@ARGV){$addSubs{$f} = 1;}
   my $b;foreach my $l(<STDIN>){
    #-- $b stands for {b}rackets, and makes sure to record whole functions.
    if($l=~/^\s*(\S+)\s+\([^\(\)]*\)\s*$/){$b=$1;}
    print $l if($addSubs{$b});
    $b=undef if($l=~/^\}\s*([\;\#]?.*)/);}
   my $rcFh;open($rcFh,"<",$rc)||die("Cannot open rc file $rc: ".$!);
   my @rc=<$rcFh>;close($rcFh);
   #-- Grab sections of bashrc marked by [SSH_INCLUDE] remarks.
   my ($i,$c,$incPos);
   foreach my $l(@rc){
    if($l=~/^\s*\#\s*\[SSH_INCLUDE\]\s+(\d+)/){$i=$1;}
    if($i){if($c<=$i){print$l;$c++;}else{$c=0;$i=0;}}}' -- ${@}
 } # END _getrc

 eval "$(_defaults)"
 eval "$(_scancnf ${SSHI_UC} ${SSHI_MC} ${@})"

 #-- Log file format definition.
 local LOGFMT="${SSH_HOST}-$(date +%Y-%m-%d_%H-%M-%S).log"
 #-- Determine if we should be logging.
 # Log by default. Turn off logging when requested.
 [ -n "${SSHI_LOG_BY_DEF}" ]&&{ [ -n "${NOLOG}" ]&& unset LOG NOLOG || LOG=1;}||
 # Do not log by default. Turn on logging when requested.
 { [ -n "${LOG}" ]&& local LOG=1;}
 #-- Make sure log  location is writable.
 [ -n "${LOG}" ]&&{
  local LOGFILE="${SSHI_LOG_LOC}/${LOGFMT}"
  touch ${LOGFILE} 2>/dev/null || local ERR=1
  [ -n "${ERR}" ]&&{
   echo "****************"
   echo -e "WARNING: Unable to write to file:\n   ${LOGFILE}.\nSession will not be logged."
   echo -e "****************\n"
   unset LOGFILE;
 } }

 #-- Skip prompt and rc file shipping if requested.
 [ -n "${NOPROMPT}" ]&& unset FOUND;

 #-- Parse things and connect if we have a matched entry in the SSH config.
 [ -n "${FOUND}" ]&&{

  local SSHREMCMD= #-- SSH Remote command to execute for the session.
  #-- We can specify PROMPTONLY on a host in .ssh/config. Set things accordingly.
  [ -n "${PROMPTONLY}" ]&&{
#   local SSHREMCMD="echo \"${RBASHRC_E}\">~/${RCPUSH};exec bash --rcfile ~/${RCPUSH}"
   [ -n "${SSHI_RPS1}" ]&& {
    echo -e "Connecting to ${FOUND} with local prompt.\n"
    SSHREMCMD="export PS1=\"${SSHI_RPS1}\";exec bash"
   }
  }||{
   #-- The rcfile to use remotely. Regenerates every time you log in.
   # bashrc will be called at the end. Overrides can be defined on the remote.
   # This variable is exported for use on remote systems.
   [ -z "${RCPUSH}" ]&& RCPUSH=".bashrc_pushed-${USER}"
   #-- Add an alias to bash (use your customized bash env).
   local USH="alias bash='/bin/bash --rcfile ~/${RCPUSH}'"
   #-- Code to determine user's local RC.
   local LOCRC='for F in .bashrc .bash_profile .profile;do [ -e ~/${F} ]&&{ echo ${F};break;};done'
   local RBASHRC='. $('"${LOCRC}"');'
   [ -n "${SSHI_RPS1}" ]&& RBASHRC+="export PS1=\"${SSHI_RPS1}\""
   local RBASHRC_E
   echo -e "Connecting to ${FOUND} with local shell includes.\n"
   #-- Default base64 encode and decode commands for different platforms.
   local B64_E=;local B64_D=;local UN=;local PL=
   local PF='UN=$(which uname);[ -n "${UN}" ]&&{ [ -x ${UN} ]&&{ PL=$(${UN} -a);
    [[ ${PL} =~ ^Darwin ]]&&{ B64_E="base64 -i -";B64_D="base64 -D -i -";};
    [[ ${PL} =~ ^Linux|Cygwin ]]&&{ B64_E="base64 -w 0";B64_D="base64 -di";} } }'
   eval "${PF}"
   #-- Gather aliases.
   local ALI=;local OI=${IFS};IFS=$'\n';for A in $(alias);do ALI="${ALI}${A};";done;IFS=${OI}
   #-- Pull directly from pushed items if in SSH session (SSHI_IS_SSH).
   local RC=
   #-- Use RCPUSH file if in an SSH session. Allows you to reuse your shipped stuff when
   # using ssh on remote systems.
   # ** This only really matters when ssh is included in SSHI_ADD_SUBS.
   # Attempt to use pushed rc if SSH.  Use local rc if non-SSH
   [ -n "${SSHI_IS_SSH}" ]&&[ -e "~/${RCPUSH}" ]&&{ RC="~/${RCPUSH}";echo "NN: ${RC}";}||{ RC=~/$(eval ${LOCRC});}
   #-- Retrieve SSHI_ADD_SUBS functions and [SSH_INCLUDE] lines.
   # Functions need to be decoded before 'source'ing them (for some reason). Decoded output is
   # piped to RCPUSH.funcs file, which is sourced from the pushed rc file.
   local RFUNCS="export SSHI_IS_SSH=1;export RCPUSH=${RCPUSH};$(_getrc ${RC} ${SSHI_ADD_SUBS})"
   local RFUNCS_E="sleep 0.2;echo "$(echo "${RFUNCS}"|${B64_E})"|\${B64_D}>~/${RCPUSH}.funcs;. ~/${RCPUSH}.funcs"
   RBASHRC_E="${PF};${ALI}${RFUNCS_E};${RBASHRC}"
   RBASHRC_E=${RBASHRC_E//\$/\\$};RBASHRC_E=${RBASHRC_E//\"/\\\"}
   local SSHREMCMD="echo \"${RBASHRC_E}\">~/${RCPUSH};exec bash --rcfile ~/${RCPUSH}"
  }
  [ -n "${LOGFILE}" ]&&{ /usr/bin/ssh ${@} -t "${SSHREMCMD}"|tee -i ${LOGFILE};}||
  { /usr/bin/ssh ${@} -t "${SSHREMCMD}";}
 }||{
  #-- No match found in config. Just run SSH command.
  [ -n "${LOGFILE}" ]&&{ /usr/bin/ssh ${@}|tee -i ${LOGFILE};}||{ /usr/bin/ssh ${@};}
 }

 #-- Logging report.
 echo "------------------------------------------------"
 [ -n "${LOG}" ]&&{
  [ -n "${LOGFILE}" ]&&{
   #-- Report the log file name, if it is not zero-length. Otherwise remove the file.
   [ -s "${LOGFILE}" ]&&{ echo "Session logged to ${LOGFILE}";}||
   { echo "No output logged from session. Removing ${LOGFILE}"; rm "${LOGFILE}";}
  }||{
   echo "WARNING: Logging is enabled, but unable to write to log. Verify  SSHI_LOG_LOC is correct.";
 } }
} # END ssh
